/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// void inorder(TreeNode* &root,vector<int>&ans)
// {
//         if(root==NULL)
//         {
//             return;
//         }
//         inorder(root->left,ans);
//         ans.push_back(root->val);
//         inorder(root->right,ans);
//         // return ans;
    
// }

//morris : witout using stack and recursion

TreeNode* find(TreeNode* &root)
{
     TreeNode* prev = root->left;
     while(prev->right!=NULL && prev->right!=root)
     {
         prev=prev->right;
     }
     return prev;
}
void inorder(TreeNode* &root,vector<int>&ans)
{
    TreeNode* curr=root;
    while(curr!=NULL)
    {
        if(!curr->left)
        {
            ans.push_back(curr->val);
            curr=curr->right;
        }
        else
        {
            TreeNode* pred = find(curr);
            if(pred->right==NULL)
            {
                pred->right=curr;
                curr=curr->left;
            }
            else
            {
                pred->right=NULL;
                ans.push_back(curr->val);
                curr=curr->right;
            }
            
        }
    }
}

class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
    vector<int>ans;
    inorder(root,ans);
    return ans;
    }    

    
};
