// /**
//  * Definition for a binary tree node.
//  * struct TreeNode {
//  *     int val;
//  *     TreeNode *left;
//  *     TreeNode *right;
//  *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//  *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  * };
//  */
 class Solution {
 public:
     void solve(TreeNode* root, vector<vector<int> >&ans)
     {
         if(root==NULL)
         {
             return ;
         }
         map<int, vector<int>>maps;
         int level=0;
         queue<TreeNode*>q;
         q.push(root);
         q.push(NULL);
         while(!q.empty())
         {
             TreeNode* frontnode= q.front();
             q.pop();
             if(frontnode==NULL && q.empty())
             {
                break;
             }
             if(frontnode==NULL && (!q.empty()))
             {
                 level++;
                //  q.pop();
                 q.push(NULL);
             }
             else
             {
                //  q.pop();
                 maps[level].push_back(frontnode->val);
                  if(frontnode->left)
                 {
                 q.push(frontnode->left);
                 // if(frontnode->right)
                 // {
                 //     continue;
                 // }
                 // else{
                 //     level++;
                 // }
                 }
                 if(frontnode->right)
                 {
                 q.push(frontnode->right);
                 // if(frontnode->left)
                 // {
                 //     continue;
                 // }
                 // else{
                 //     level++;
                 // }
                 }
             }          
         

         }
         for(auto i:maps)
         {
             ans.push_back(i.second);
         }
     }

     vector<vector<int>> levelOrder(TreeNode* root) {
         vector<vector<int>>ans;
         solve(root,ans);
         return ans;
     }
 };

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
//     void solve(TreeNode* root, vector<vector<int> >&ans)
//     {
//         if(root==NULL)
//         {
//             return ;
//         }
//         map<int, vector<int>>maps;
//         int level=0;
//         queue<TreeNode*>q;
//         q.push(root);
//         while(!q.empty())
//         {
//             TreeNode* frontnode= q.front();
//             q.pop();
//             maps[level].push_back(frontnode->val);

//             if(frontnode->left)
//             {
//                 q.push(frontnode->left);
//                 if(frontnode->right)
//                 {
//                     continue;
//                 }
//                 else{
//                     level++;
//                 }
//             }
//             if(frontnode->right)
//             {
//                 q.push(frontnode->right);
//                 level++;
//             }

//         }
//         for(auto i:maps)
//         {
//             ans.push_back(i.second);
//         }
//     }

//     vector<vector<int>> levelOrder(TreeNode* root) {
//         vector<vector<int>>ans;
//         solve(root,ans);
//         return ans;
//     }
// };
