/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int find_pos(map<int,int>&maps, int element)
    {
        return maps[element];
    }

    TreeNode* solve(vector<int>&in, vector<int>&post, int &index, int in_start, int in_end,map<int,int>&maps)
    {
        if(in_start>in_end || index<0)
        {
            return NULL;
        }

        int element=post[index--];
        TreeNode* root = new TreeNode(element);
        int pos = find_pos(maps, element);

        //left and right call
        root->right = solve(in, post, index, pos+1, in_end, maps);
        root->left = solve(in, post, index, in_start, pos-1, maps);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postindex=inorder.size()-1;
        map<int,int>maps;
        for(int i=0; i<inorder.size(); i++)
        {
            maps[inorder[i]]=i;
        }
        TreeNode* ans=solve(inorder,postorder,postindex,0,inorder.size()-1,maps);
        return ans;
    }
};
