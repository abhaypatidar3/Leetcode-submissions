/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int, map<int, vector<int> > > maps;
        queue<pair<TreeNode*, pair<int,int> > >q;
        vector<vector<int>>ans;
        if(root==NULL)
        {
            return ans;
        }
        q.push(make_pair(root, make_pair(0,0)));
        int hd_old=-100;
        int lvl_old=-100;
        while(!q.empty())
        {
            pair<TreeNode*, pair<int,int> > temp = q.front();
            TreeNode* frontnode = temp.first;
            q.pop();
            int hd = temp.second.first;
            int lvl = temp.second.second;
            if(hd_old==hd && lvl_old==lvl)
            {
                int lastelement=maps[hd_old][lvl_old].back();
                int current=frontnode->val;
                if(lastelement>current)
                {
                    maps[hd_old][lvl_old].pop_back();
                    maps[hd][lvl].push_back(frontnode->val);
                    maps[hd][lvl].push_back(lastelement);

                }
                else{
                    maps[hd][lvl].push_back(frontnode->val);
                }
            }
            else
            {
                maps[hd][lvl].push_back(frontnode->val);
            }
            hd_old=hd;
            lvl_old=lvl;
            
           

            if(frontnode->left)
            {
                q.push(make_pair(frontnode->left, make_pair(hd-1, lvl+1)));
            }
            if(frontnode->right)
            {
                q.push(make_pair(frontnode->right, make_pair(hd+1, lvl+1)));
            }
        }
        vector<int>temp1;
        int stat=0;
        for(auto i : maps)
        {
            for(auto j : i.second)
            {
                for(int k : j.second)
                {
                    temp1.push_back(k);
                }
                if(temp1.size()>0)
                {
                    sort(temp1.begin()+stat, temp1.end());
                    stat=temp1.size();

                }
            }
            ans.push_back(temp1);
            temp1.clear();
            stat=0;
        }
        return ans;
    }
};
