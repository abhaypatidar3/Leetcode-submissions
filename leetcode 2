/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* solve(ListNode* &l1, ListNode* &l2, int &carry)
    {
        ListNode* ans;
        if(l1==NULL && l2==NULL && carry==0)
        {
            return NULL;
        }
        else if(l1==NULL && l2==NULL && carry>0)
        {
            int num = 0;
            ListNode* root = new ListNode(carry);
            ans = solve(l1, l2, num);
            root->next = ans;
            return root;
        }
        else if(l1!=NULL && l2==NULL)
        {
            int store = (carry + l1->val)%10;
            carry = (carry + l1->val)/10;
            ListNode* root = new ListNode(store);
            ans = solve(l1->next, l2, carry);
            root->next = ans;
            return root;
        }
        else if(l1==NULL && l2!=NULL)
        {
            int store = (carry + l2->val)%10;
            carry = (carry + l2->val)/10;
            ListNode* root = new ListNode(store);
            ans = solve(l1, l2->next, carry);
            root->next = ans;
            return root;
        }
        int store =  (l1->val + l2->val + carry)%10;
        carry = (l1->val + l2->val + carry)/10;
        ListNode* root = new ListNode(store);
        ans = solve(l1->next, l2->next, carry);
        root->next = ans;
        return root;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry = 0;
        ListNode* ans = solve(l1, l2, carry);
        
        return ans;
    }
};
